// NOT TO BE PUBLISHED ON GITHUB. DO NOT SHARE LAB SOLUTIONS.
package lab3;

import graph.Graph;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

public class Lab3 {
  public static <T> int distance(Graph<T> g, T source, T dest) {
    int distance = 0;
    Set<T> visited = new HashSet<>();
    visited.add(source);
    Set<T> current = new HashSet<>();
    current.add(source);
    while (!current.isEmpty()) {
    	Set<T> next = new HashSet<>();
    	for (T w : current) {
    		if (w.equals(dest)) {
    			return distance;
    		}
    			for (T neighbour : g.neighbours(w)) {
    				if (!visited.contains(neighbour)) {
    					visited.add(neighbour);
    					next.add(neighbour);
    				}
    			}
    		}
    	distance++;
    	current = next;
    		
    	}
    return -1;
    }

    
  }

